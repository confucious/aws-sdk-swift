// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension EFS {

    public struct CreateFileSystemRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationToken", required: true, type: .string), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "PerformanceMode", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisionedThroughputInMibps", required: false, type: .double), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ThroughputMode", required: false, type: .enum)
        ]

        /// A string of up to 64 ASCII characters. Amazon EFS uses this to ensure idempotent creation.
        public let creationToken: String
        /// A Boolean value that, if true, creates an encrypted file system. When creating an encrypted file system, you have the option of specifying CreateFileSystemRequest$KmsKeyId for an existing AWS Key Management Service (AWS KMS) customer master key (CMK). If you don't specify a CMK, then the default CMK for Amazon EFS, /aws/elasticfilesystem, is used to protect the encrypted file system. 
        public let encrypted: Bool?
        /// The ID of the AWS KMS CMK to be used to protect the encrypted file system. This parameter is only required if you want to use a nondefault CMK. If this parameter is not specified, the default CMK for Amazon EFS is used. This ID can be in one of the following formats:   Key ID - A unique identifier of the key, for example 1234abcd-12ab-34cd-56ef-1234567890ab.   ARN - An Amazon Resource Name (ARN) for the key, for example arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias - A previously created display name for a key, for example alias/projectKey1.   Key alias ARN - An ARN for a key alias, for example arn:aws:kms:us-west-2:444455556666:alias/projectKey1.   If KmsKeyId is specified, the CreateFileSystemRequest$Encrypted parameter must be set to true.
        public let kmsKeyId: String?
        /// The performance mode of the file system. We recommend generalPurpose performance mode for most file systems. File systems using the maxIO performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. The performance mode can't be changed after the file system has been created.
        public let performanceMode: PerformanceMode?
        /// The throughput, measured in MiB/s, that you want to provision for a file system that you're creating. Valid values are 1-1024. Required if ThroughputMode is set to provisioned. The upper limit for throughput is 1024 MiB/s. You can get this limit increased by contacting AWS Support. For more information, see Amazon EFS Limits That You Can Increase in the Amazon EFS User Guide. 
        public let provisionedThroughputInMibps: Double?
        /// A value that specifies to create one or more tags associated with the file system. Each tag is a user-defined key-value pair. Name your file system on creation by including a "Key":"Name","Value":"{value}" key-value pair.
        public let tags: [Tag]?
        /// The throughput mode for the file system to be created. There are two throughput modes to choose from for your file system: bursting and provisioned. If you set ThroughputMode to provisioned, you must also set a value for ProvisionedThroughPutInMibps. You can decrease your file system's throughput in Provisioned Throughput mode or change between the throughput modes as long as itâ€™s been more than 24 hours since the last decrease or throughput mode change. For more, see Specifying Throughput with Provisioned Mode in the Amazon EFS User Guide. 
        public let throughputMode: ThroughputMode?

        public init(creationToken: String, encrypted: Bool? = nil, kmsKeyId: String? = nil, performanceMode: PerformanceMode? = nil, provisionedThroughputInMibps: Double? = nil, tags: [Tag]? = nil, throughputMode: ThroughputMode? = nil) {
            self.creationToken = creationToken
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.performanceMode = performanceMode
            self.provisionedThroughputInMibps = provisionedThroughputInMibps
            self.tags = tags
            self.throughputMode = throughputMode
        }

        public func validate(name: String) throws {
            try validate(self.creationToken, name:"creationToken", parent: name, max: 64)
            try validate(self.creationToken, name:"creationToken", parent: name, min: 1)
            try validate(self.kmsKeyId, name:"kmsKeyId", parent: name, max: 2048)
            try validate(self.kmsKeyId, name:"kmsKeyId", parent: name, min: 1)
            try validate(self.provisionedThroughputInMibps, name:"provisionedThroughputInMibps", parent: name, min: 1)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case creationToken = "CreationToken"
            case encrypted = "Encrypted"
            case kmsKeyId = "KmsKeyId"
            case performanceMode = "PerformanceMode"
            case provisionedThroughputInMibps = "ProvisionedThroughputInMibps"
            case tags = "Tags"
            case throughputMode = "ThroughputMode"
        }
    }

    public struct CreateMountTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystemId", required: true, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "SubnetId", required: true, type: .string)
        ]

        /// The ID of the file system for which to create the mount target.
        public let fileSystemId: String
        /// Valid IPv4 address within the address range of the specified subnet.
        public let ipAddress: String?
        /// Up to five VPC security group IDs, of the form sg-xxxxxxxx. These must be for the same VPC as subnet specified.
        public let securityGroups: [String]?
        /// The ID of the subnet to add the mount target in.
        public let subnetId: String

        public init(fileSystemId: String, ipAddress: String? = nil, securityGroups: [String]? = nil, subnetId: String) {
            self.fileSystemId = fileSystemId
            self.ipAddress = ipAddress
            self.securityGroups = securityGroups
            self.subnetId = subnetId
        }

        public func validate(name: String) throws {
            try validate(self.securityGroups, name:"securityGroups", parent: name, max: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case ipAddress = "IpAddress"
            case securityGroups = "SecurityGroups"
            case subnetId = "SubnetId"
        }
    }

    public struct CreateTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystemId", location: .uri(locationName: "FileSystemId"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]

        /// The ID of the file system whose tags you want to modify (String). This operation modifies the tags only, not the file system.
        public let fileSystemId: String
        /// An array of Tag objects to add. Each Tag object is a key-value pair. 
        public let tags: [Tag]

        public init(fileSystemId: String, tags: [Tag]) {
            self.fileSystemId = fileSystemId
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case tags = "Tags"
        }
    }

    public struct DeleteFileSystemRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystemId", location: .uri(locationName: "FileSystemId"), required: true, type: .string)
        ]

        /// The ID of the file system you want to delete.
        public let fileSystemId: String

        public init(fileSystemId: String) {
            self.fileSystemId = fileSystemId
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
        }
    }

    public struct DeleteMountTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MountTargetId", location: .uri(locationName: "MountTargetId"), required: true, type: .string)
        ]

        /// The ID of the mount target to delete (String).
        public let mountTargetId: String

        public init(mountTargetId: String) {
            self.mountTargetId = mountTargetId
        }

        private enum CodingKeys: String, CodingKey {
            case mountTargetId = "MountTargetId"
        }
    }

    public struct DeleteTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystemId", location: .uri(locationName: "FileSystemId"), required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]

        /// The ID of the file system whose tags you want to delete (String).
        public let fileSystemId: String
        /// A list of tag keys to delete.
        public let tagKeys: [String]

        public init(fileSystemId: String, tagKeys: [String]) {
            self.fileSystemId = fileSystemId
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case tagKeys = "TagKeys"
        }
    }

    public struct DescribeFileSystemsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationToken", location: .querystring(locationName: "CreationToken"), required: false, type: .string), 
            AWSShapeMember(label: "FileSystemId", location: .querystring(locationName: "FileSystemId"), required: false, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .integer)
        ]

        /// (Optional) Restricts the list to the file system with this creation token (String). You specify a creation token when you create an Amazon EFS file system.
        public let creationToken: String?
        /// (Optional) ID of the file system whose description you want to retrieve (String).
        public let fileSystemId: String?
        /// (Optional) Opaque pagination token returned from a previous DescribeFileSystems operation (String). If present, specifies to continue the list from where the returning call had left off. 
        public let marker: String?
        /// (Optional) Specifies the maximum number of file systems to return in the response (integer). Currently, this number is automatically set to 10, and other values are ignored. The response is paginated at 10 per page if you have more than 10 file systems. 
        public let maxItems: Int?

        public init(creationToken: String? = nil, fileSystemId: String? = nil, marker: String? = nil, maxItems: Int? = nil) {
            self.creationToken = creationToken
            self.fileSystemId = fileSystemId
            self.marker = marker
            self.maxItems = maxItems
        }

        public func validate(name: String) throws {
            try validate(self.creationToken, name:"creationToken", parent: name, max: 64)
            try validate(self.creationToken, name:"creationToken", parent: name, min: 1)
            try validate(self.maxItems, name:"maxItems", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case creationToken = "CreationToken"
            case fileSystemId = "FileSystemId"
            case marker = "Marker"
            case maxItems = "MaxItems"
        }
    }

    public struct DescribeFileSystemsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystems", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]

        /// An array of file system descriptions.
        public let fileSystems: [FileSystemDescription]?
        /// Present if provided by caller in the request (String).
        public let marker: String?
        /// Present if there are more file systems than returned in the response (String). You can use the NextMarker in the subsequent request to fetch the descriptions.
        public let nextMarker: String?

        public init(fileSystems: [FileSystemDescription]? = nil, marker: String? = nil, nextMarker: String? = nil) {
            self.fileSystems = fileSystems
            self.marker = marker
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystems = "FileSystems"
            case marker = "Marker"
            case nextMarker = "NextMarker"
        }
    }

    public struct DescribeLifecycleConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystemId", location: .uri(locationName: "FileSystemId"), required: true, type: .string)
        ]

        /// The ID of the file system whose LifecycleConfiguration object you want to retrieve (String).
        public let fileSystemId: String

        public init(fileSystemId: String) {
            self.fileSystemId = fileSystemId
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
        }
    }

    public struct DescribeMountTargetSecurityGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MountTargetId", location: .uri(locationName: "MountTargetId"), required: true, type: .string)
        ]

        /// The ID of the mount target whose security groups you want to retrieve.
        public let mountTargetId: String

        public init(mountTargetId: String) {
            self.mountTargetId = mountTargetId
        }

        private enum CodingKeys: String, CodingKey {
            case mountTargetId = "MountTargetId"
        }
    }

    public struct DescribeMountTargetSecurityGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroups", required: true, type: .list)
        ]

        /// An array of security groups.
        public let securityGroups: [String]

        public init(securityGroups: [String]) {
            self.securityGroups = securityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroups = "SecurityGroups"
        }
    }

    public struct DescribeMountTargetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystemId", location: .querystring(locationName: "FileSystemId"), required: false, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .integer), 
            AWSShapeMember(label: "MountTargetId", location: .querystring(locationName: "MountTargetId"), required: false, type: .string)
        ]

        /// (Optional) ID of the file system whose mount targets you want to list (String). It must be included in your request if MountTargetId is not included.
        public let fileSystemId: String?
        /// (Optional) Opaque pagination token returned from a previous DescribeMountTargets operation (String). If present, it specifies to continue the list from where the previous returning call left off.
        public let marker: String?
        /// (Optional) Maximum number of mount targets to return in the response. Currently, this number is automatically set to 10, and other values are ignored. The response is paginated at 10 per page if you have more than 10 mount targets.
        public let maxItems: Int?
        /// (Optional) ID of the mount target that you want to have described (String). It must be included in your request if FileSystemId is not included.
        public let mountTargetId: String?

        public init(fileSystemId: String? = nil, marker: String? = nil, maxItems: Int? = nil, mountTargetId: String? = nil) {
            self.fileSystemId = fileSystemId
            self.marker = marker
            self.maxItems = maxItems
            self.mountTargetId = mountTargetId
        }

        public func validate(name: String) throws {
            try validate(self.maxItems, name:"maxItems", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case marker = "Marker"
            case maxItems = "MaxItems"
            case mountTargetId = "MountTargetId"
        }
    }

    public struct DescribeMountTargetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "MountTargets", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]

        /// If the request included the Marker, the response returns that value in this field.
        public let marker: String?
        /// Returns the file system's mount targets as an array of MountTargetDescription objects.
        public let mountTargets: [MountTargetDescription]?
        /// If a value is present, there are more mount targets to return. In a subsequent request, you can provide Marker in your request with this value to retrieve the next set of mount targets.
        public let nextMarker: String?

        public init(marker: String? = nil, mountTargets: [MountTargetDescription]? = nil, nextMarker: String? = nil) {
            self.marker = marker
            self.mountTargets = mountTargets
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case mountTargets = "MountTargets"
            case nextMarker = "NextMarker"
        }
    }

    public struct DescribeTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystemId", location: .uri(locationName: "FileSystemId"), required: true, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .integer)
        ]

        /// The ID of the file system whose tag set you want to retrieve.
        public let fileSystemId: String
        /// (Optional) An opaque pagination token returned from a previous DescribeTags operation (String). If present, it specifies to continue the list from where the previous call left off.
        public let marker: String?
        /// (Optional) The maximum number of file system tags to return in the response. Currently, this number is automatically set to 10, and other values are ignored. The response is paginated at 10 per page if you have more than 10 tags.
        public let maxItems: Int?

        public init(fileSystemId: String, marker: String? = nil, maxItems: Int? = nil) {
            self.fileSystemId = fileSystemId
            self.marker = marker
            self.maxItems = maxItems
        }

        public func validate(name: String) throws {
            try validate(self.maxItems, name:"maxItems", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case marker = "Marker"
            case maxItems = "MaxItems"
        }
    }

    public struct DescribeTagsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]

        /// If the request included a Marker, the response returns that value in this field.
        public let marker: String?
        /// If a value is present, there are more tags to return. In a subsequent request, you can provide the value of NextMarker as the value of the Marker parameter in your next request to retrieve the next set of tags.
        public let nextMarker: String?
        /// Returns tags associated with the file system as an array of Tag objects. 
        public let tags: [Tag]

        public init(marker: String? = nil, nextMarker: String? = nil, tags: [Tag]) {
            self.marker = marker
            self.nextMarker = nextMarker
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case nextMarker = "NextMarker"
            case tags = "Tags"
        }
    }

    public struct FileSystemDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "CreationToken", required: true, type: .string), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "FileSystemId", required: true, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "LifeCycleState", required: true, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "NumberOfMountTargets", required: true, type: .integer), 
            AWSShapeMember(label: "OwnerId", required: true, type: .string), 
            AWSShapeMember(label: "PerformanceMode", required: true, type: .enum), 
            AWSShapeMember(label: "ProvisionedThroughputInMibps", required: false, type: .double), 
            AWSShapeMember(label: "SizeInBytes", required: true, type: .structure), 
            AWSShapeMember(label: "Tags", required: true, type: .list), 
            AWSShapeMember(label: "ThroughputMode", required: false, type: .enum)
        ]

        /// The time that the file system was created, in seconds (since 1970-01-01T00:00:00Z).
        public let creationTime: TimeStamp
        /// The opaque string specified in the request.
        public let creationToken: String
        /// A Boolean value that, if true, indicates that the file system is encrypted.
        public let encrypted: Bool?
        /// The ID of the file system, assigned by Amazon EFS.
        public let fileSystemId: String
        /// The ID of an AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the encrypted file system.
        public let kmsKeyId: String?
        /// The lifecycle phase of the file system.
        public let lifeCycleState: LifeCycleState
        /// You can add tags to a file system, including a Name tag. For more information, see CreateFileSystem. If the file system has a Name tag, Amazon EFS returns the value in this field. 
        public let name: String?
        /// The current number of mount targets that the file system has. For more information, see CreateMountTarget.
        public let numberOfMountTargets: Int
        /// The AWS account that created the file system. If the file system was created by an IAM user, the parent account to which the user belongs is the owner.
        public let ownerId: String
        /// The performance mode of the file system.
        public let performanceMode: PerformanceMode
        /// The throughput, measured in MiB/s, that you want to provision for a file system. Valid values are 1-1024. Required if ThroughputMode is set to provisioned. The limit on throughput is 1024 MiB/s. You can get these limits increased by contacting AWS Support. For more information, see Amazon EFS Limits That You Can Increase in the Amazon EFS User Guide. 
        public let provisionedThroughputInMibps: Double?
        /// The latest known metered size (in bytes) of data stored in the file system, in its Value field, and the time at which that size was determined in its Timestamp field. The Timestamp value is the integer number of seconds since 1970-01-01T00:00:00Z. The SizeInBytes value doesn't represent the size of a consistent snapshot of the file system, but it is eventually consistent when there are no writes to the file system. That is, SizeInBytes represents actual size only if the file system is not modified for a period longer than a couple of hours. Otherwise, the value is not the exact size that the file system was at any point in time. 
        public let sizeInBytes: FileSystemSize
        /// The tags associated with the file system, presented as an array of Tag objects.
        public let tags: [Tag]
        /// The throughput mode for a file system. There are two throughput modes to choose from for your file system: bursting and provisioned. If you set ThroughputMode to provisioned, you must also set a value for ProvisionedThroughPutInMibps. You can decrease your file system's throughput in Provisioned Throughput mode or change between the throughput modes as long as itâ€™s been more than 24 hours since the last decrease or throughput mode change. 
        public let throughputMode: ThroughputMode?

        public init(creationTime: TimeStamp, creationToken: String, encrypted: Bool? = nil, fileSystemId: String, kmsKeyId: String? = nil, lifeCycleState: LifeCycleState, name: String? = nil, numberOfMountTargets: Int, ownerId: String, performanceMode: PerformanceMode, provisionedThroughputInMibps: Double? = nil, sizeInBytes: FileSystemSize, tags: [Tag], throughputMode: ThroughputMode? = nil) {
            self.creationTime = creationTime
            self.creationToken = creationToken
            self.encrypted = encrypted
            self.fileSystemId = fileSystemId
            self.kmsKeyId = kmsKeyId
            self.lifeCycleState = lifeCycleState
            self.name = name
            self.numberOfMountTargets = numberOfMountTargets
            self.ownerId = ownerId
            self.performanceMode = performanceMode
            self.provisionedThroughputInMibps = provisionedThroughputInMibps
            self.sizeInBytes = sizeInBytes
            self.tags = tags
            self.throughputMode = throughputMode
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case creationToken = "CreationToken"
            case encrypted = "Encrypted"
            case fileSystemId = "FileSystemId"
            case kmsKeyId = "KmsKeyId"
            case lifeCycleState = "LifeCycleState"
            case name = "Name"
            case numberOfMountTargets = "NumberOfMountTargets"
            case ownerId = "OwnerId"
            case performanceMode = "PerformanceMode"
            case provisionedThroughputInMibps = "ProvisionedThroughputInMibps"
            case sizeInBytes = "SizeInBytes"
            case tags = "Tags"
            case throughputMode = "ThroughputMode"
        }
    }

    public struct FileSystemSize: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Timestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Value", required: true, type: .long), 
            AWSShapeMember(label: "ValueInIA", required: false, type: .long), 
            AWSShapeMember(label: "ValueInStandard", required: false, type: .long)
        ]

        /// The time at which the size of data, returned in the Value field, was determined. The value is the integer number of seconds since 1970-01-01T00:00:00Z.
        public let timestamp: TimeStamp?
        /// The latest known metered size (in bytes) of data stored in the file system.
        public let value: Int64
        /// The latest known metered size (in bytes) of data stored in the Infrequent Access storage class.
        public let valueInIA: Int64?
        /// The latest known metered size (in bytes) of data stored in the Standard storage class.
        public let valueInStandard: Int64?

        public init(timestamp: TimeStamp? = nil, value: Int64, valueInIA: Int64? = nil, valueInStandard: Int64? = nil) {
            self.timestamp = timestamp
            self.value = value
            self.valueInIA = valueInIA
            self.valueInStandard = valueInStandard
        }

        private enum CodingKeys: String, CodingKey {
            case timestamp = "Timestamp"
            case value = "Value"
            case valueInIA = "ValueInIA"
            case valueInStandard = "ValueInStandard"
        }
    }

    public enum LifeCycleState: String, CustomStringConvertible, Codable {
        case creating = "creating"
        case available = "available"
        case updating = "updating"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct LifecycleConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecyclePolicies", required: false, type: .list)
        ]

        /// An array of lifecycle management policies. Currently, EFS supports a maximum of one policy per file system.
        public let lifecyclePolicies: [LifecyclePolicy]?

        public init(lifecyclePolicies: [LifecyclePolicy]? = nil) {
            self.lifecyclePolicies = lifecyclePolicies
        }

        private enum CodingKeys: String, CodingKey {
            case lifecyclePolicies = "LifecyclePolicies"
        }
    }

    public struct LifecyclePolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitionToIA", required: false, type: .enum)
        ]

        ///  A value that describes the period of time that a file is not accessed, after which it transitions to the IA storage class. Metadata operations such as listing the contents of a directory don't count as file access events.
        public let transitionToIA: TransitionToIARules?

        public init(transitionToIA: TransitionToIARules? = nil) {
            self.transitionToIA = transitionToIA
        }

        private enum CodingKeys: String, CodingKey {
            case transitionToIA = "TransitionToIA"
        }
    }

    public struct ModifyMountTargetSecurityGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MountTargetId", location: .uri(locationName: "MountTargetId"), required: true, type: .string), 
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list)
        ]

        /// The ID of the mount target whose security groups you want to modify.
        public let mountTargetId: String
        /// An array of up to five VPC security group IDs.
        public let securityGroups: [String]?

        public init(mountTargetId: String, securityGroups: [String]? = nil) {
            self.mountTargetId = mountTargetId
            self.securityGroups = securityGroups
        }

        public func validate(name: String) throws {
            try validate(self.securityGroups, name:"securityGroups", parent: name, max: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case mountTargetId = "MountTargetId"
            case securityGroups = "SecurityGroups"
        }
    }

    public struct MountTargetDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystemId", required: true, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "LifeCycleState", required: true, type: .enum), 
            AWSShapeMember(label: "MountTargetId", required: true, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", required: true, type: .string)
        ]

        /// The ID of the file system for which the mount target is intended.
        public let fileSystemId: String
        /// Address at which the file system can be mounted by using the mount target.
        public let ipAddress: String?
        /// Lifecycle state of the mount target.
        public let lifeCycleState: LifeCycleState
        /// System-assigned mount target ID.
        public let mountTargetId: String
        /// The ID of the network interface that Amazon EFS created when it created the mount target.
        public let networkInterfaceId: String?
        /// AWS account ID that owns the resource.
        public let ownerId: String?
        /// The ID of the mount target's subnet.
        public let subnetId: String

        public init(fileSystemId: String, ipAddress: String? = nil, lifeCycleState: LifeCycleState, mountTargetId: String, networkInterfaceId: String? = nil, ownerId: String? = nil, subnetId: String) {
            self.fileSystemId = fileSystemId
            self.ipAddress = ipAddress
            self.lifeCycleState = lifeCycleState
            self.mountTargetId = mountTargetId
            self.networkInterfaceId = networkInterfaceId
            self.ownerId = ownerId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case ipAddress = "IpAddress"
            case lifeCycleState = "LifeCycleState"
            case mountTargetId = "MountTargetId"
            case networkInterfaceId = "NetworkInterfaceId"
            case ownerId = "OwnerId"
            case subnetId = "SubnetId"
        }
    }

    public enum PerformanceMode: String, CustomStringConvertible, Codable {
        case generalpurpose = "generalPurpose"
        case maxio = "maxIO"
        public var description: String { return self.rawValue }
    }

    public struct PutLifecycleConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystemId", location: .uri(locationName: "FileSystemId"), required: true, type: .string), 
            AWSShapeMember(label: "LifecyclePolicies", required: true, type: .list)
        ]

        /// The ID of the file system for which you are creating the LifecycleConfiguration object (String).
        public let fileSystemId: String
        /// An array of LifecyclePolicy objects that define the file system's LifecycleConfiguration object. A LifecycleConfiguration object tells lifecycle management when to transition files from the Standard storage class to the Infrequent Access storage class.
        public let lifecyclePolicies: [LifecyclePolicy]

        public init(fileSystemId: String, lifecyclePolicies: [LifecyclePolicy]) {
            self.fileSystemId = fileSystemId
            self.lifecyclePolicies = lifecyclePolicies
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case lifecyclePolicies = "LifecyclePolicies"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]

        /// The tag key (String). The key can't start with aws:.
        public let key: String
        /// The value of the tag key.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.key, name:"key", parent: name, max: 128)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.value, name:"value", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public enum ThroughputMode: String, CustomStringConvertible, Codable {
        case bursting = "bursting"
        case provisioned = "provisioned"
        public var description: String { return self.rawValue }
    }

    public enum TransitionToIARules: String, CustomStringConvertible, Codable {
        case after7Days = "AFTER_7_DAYS"
        case after14Days = "AFTER_14_DAYS"
        case after30Days = "AFTER_30_DAYS"
        case after60Days = "AFTER_60_DAYS"
        case after90Days = "AFTER_90_DAYS"
        public var description: String { return self.rawValue }
    }

    public struct UpdateFileSystemRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystemId", location: .uri(locationName: "FileSystemId"), required: true, type: .string), 
            AWSShapeMember(label: "ProvisionedThroughputInMibps", required: false, type: .double), 
            AWSShapeMember(label: "ThroughputMode", required: false, type: .enum)
        ]

        /// The ID of the file system that you want to update.
        public let fileSystemId: String
        /// (Optional) The amount of throughput, in MiB/s, that you want to provision for your file system. Valid values are 1-1024. Required if ThroughputMode is changed to provisioned on update. If you're not updating the amount of provisioned throughput for your file system, you don't need to provide this value in your request. 
        public let provisionedThroughputInMibps: Double?
        /// (Optional) The throughput mode that you want your file system to use. If you're not updating your throughput mode, you don't need to provide this value in your request. If you are changing the ThroughputMode to provisioned, you must also set a value for ProvisionedThroughputInMibps.
        public let throughputMode: ThroughputMode?

        public init(fileSystemId: String, provisionedThroughputInMibps: Double? = nil, throughputMode: ThroughputMode? = nil) {
            self.fileSystemId = fileSystemId
            self.provisionedThroughputInMibps = provisionedThroughputInMibps
            self.throughputMode = throughputMode
        }

        public func validate(name: String) throws {
            try validate(self.provisionedThroughputInMibps, name:"provisionedThroughputInMibps", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case provisionedThroughputInMibps = "ProvisionedThroughputInMibps"
            case throughputMode = "ThroughputMode"
        }
    }
}
